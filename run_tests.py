#!/usr/bin/env python3
"""
Script ƒë·ªÉ ch·∫°y test cho c√°c gi·∫£i ph√°p LeetCode
C√°ch d√πng: python run_tests.py [t√πy ch·ªçn]
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path


def run_pytest(test_path=None, verbose=False, coverage=False, html_report=False):
    """
    Ch·∫°y pytest v·ªõi c√°c t√πy ch·ªçn ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    
    Tham s·ªë:
        test_path: File ho·∫∑c th∆∞ m·ª•c test c·ª• th·ªÉ ƒë·ªÉ ch·∫°y
        verbose: C√≥ ch·∫°y ·ªü ch·∫ø ƒë·ªô verbose kh√¥ng
        coverage: C√≥ t·∫°o b√°o c√°o coverage kh√¥ng
        html_report: C√≥ t·∫°o b√°o c√°o HTML kh√¥ng
    """
    cmd = ["python", "-m", "pytest"]
    
    if test_path:
        cmd.append(test_path)
    else:
        cmd.append("tests/")
    
    if verbose:
        cmd.append("-v")
    
    if coverage:
        cmd.append("--cov=solutions")
        cmd.append("--cov-report=term-missing")
    
    if html_report:
        cmd.append("--cov=solutions")
        cmd.append("--cov-report=html")
        cmd.append("--html=test_report.html")
    
    print(f"ƒêang ch·∫°y l·ªánh: {' '.join(cmd)}")
    print("-" * 50)
    
    try:
        result = subprocess.run(cmd, check=True)
        print("\n‚úÖ T·∫•t c·∫£ test ƒë·ªÅu th√†nh c√¥ng!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Test th·∫•t b·∫°i v·ªõi m√£ tho√°t {e.returncode}")
        return False


def list_available_tests():
    """Li·ªát k√™ t·∫•t c·∫£ c√°c file test c√≥ s·∫µn"""
    test_dir = Path("tests")
    if not test_dir.exists():
        print("Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c tests!")
        return
    
    test_files = list(test_dir.glob("test_*.py"))
    
    if not test_files:
        print("Kh√¥ng t√¨m th·∫•y file test n√†o!")
        return
    
    print("C√°c file test c√≥ s·∫µn:")
    print("-" * 30)
    
    for test_file in sorted(test_files):
        # Tr√≠ch xu·∫•t t√™n b√†i to√°n t·ª´ t√™n file test
        problem_name = test_file.stem.replace("test_", "").replace("_", " ").title()
        print(f"üìù {test_file.name} - {problem_name}")
    
    print(f"\nT·ªïng c·ªông: {len(test_files)} file test")


def run_specific_solution(solution_path):
    """
    Ch·∫°y m·ªôt file gi·∫£i ph√°p c·ª• th·ªÉ
    
    Tham s·ªë:
        solution_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file gi·∫£i ph√°p
    """
    if not os.path.exists(solution_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file gi·∫£i ph√°p: {solution_path}")
        return False
    
    print(f"ƒêang ch·∫°y gi·∫£i ph√°p: {solution_path}")
    print("-" * 50)
    
    try:
        result = subprocess.run([sys.executable, solution_path], check=True)
        print("\n‚úÖ Gi·∫£i ph√°p ch·∫°y th√†nh c√¥ng!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Gi·∫£i ph√°p th·∫•t b·∫°i v·ªõi m√£ tho√°t {e.returncode}")
        return False


def main():
    """H√†m ch√≠nh"""
    parser = argparse.ArgumentParser(description="Ch·∫°y test cho c√°c gi·∫£i ph√°p LeetCode")
    parser.add_argument("--test", help="File ho·∫∑c th∆∞ m·ª•c test c·ª• th·ªÉ ƒë·ªÉ ch·∫°y")
    parser.add_argument("--solution", help="Ch·∫°y m·ªôt file gi·∫£i ph√°p c·ª• th·ªÉ")
    parser.add_argument("--verbose", "-v", action="store_true", help="ƒê·∫ßu ra chi ti·∫øt")
    parser.add_argument("--coverage", action="store_true", help="T·∫°o b√°o c√°o coverage")
    parser.add_argument("--html", action="store_true", help="T·∫°o b√°o c√°o test HTML")
    parser.add_argument("--list", action="store_true", help="Li·ªát k√™ c√°c test c√≥ s·∫µn")
    
    args = parser.parse_args()
    
    if args.list:
        list_available_tests()
        return
    
    if args.solution:
        run_specific_solution(args.solution)
        return
    
    # Ch·∫°y test
    success = run_pytest(
        test_path=args.test,
        verbose=args.verbose,
        coverage=args.coverage,
        html_report=args.html
    )
    
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    main() 